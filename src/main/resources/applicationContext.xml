<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mongo="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

    <!--</bean>-->
    <bean id="placeholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:config.properties</value>
            </list>
        </property>
    </bean>

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
        <property name="initialSize" value="15"/>
        <property name="maxActive" value="20"/>
        <property name="maxWait" value="60000"/>
        <property name="poolPreparedStatements" value="true"/>
        <property name="validationQuery" value="/* ping */SELECT 1"></property>
    </bean>
    <!--<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" abstract="false"-->
          <!--lazy-init="false" autowire="default">-->
        <!--<property name="dataSource">-->
            <!--<ref bean="dataSource"/>-->
        <!--</property>-->
    <!--</bean>-->
    <!--&lt;!&ndash; 事务处理 &ndash;&gt;-->
    <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
    <!--</bean>-->
    <!--<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">-->
        <!--<property name="transactionManager" ref="transactionManager"/>-->
    <!--</bean>-->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->
    <!--&lt;!&ndash; sqlSessionFactory配置 &ndash;&gt;-->
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
        <!--<property name="mapperLocations" value="classpath*:com/huigujia/**/dao/xml/*.xml"></property>-->
        <!--<property name="dataSource" ref="dataSource"/>-->
        <!--<property name="configurationProperties">-->
            <!--<props>-->
                <!--<prop key="shopIds">${shopIds:0}</prop>-->
                <!--<prop key="blackShopIds">${blackShopIds:0}</prop>-->
            <!--</props>-->
        <!--</property>-->
        <!--<property name="plugins">-->
            <!--<bean class="com.huigujia.common.interceptor.mybatis.PagingInterceptor"/>-->
        <!--</property>-->
        <!--<property name="typeHandlersPackage" value="com.huigujia.typehandler"/>-->
    <!--</bean>-->
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
        <!--<property name="basePackage" value="com.huigujia.**.mapper"/>-->
        <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->
    <!--</bean>-->

    <bean class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis_host}"/>
        <property name="port" value="${redis_port}"/>
    </bean>


    <mongo:repositories base-package="com.huigujia.common.mongo"/>

    <mongo:mongo host="${mongo.host}" port="${mongo.port}">
        <mongo:options
                connections-per-host="${mongo.connectionsPerHost}"
                threads-allowed-to-block-for-connection-multiplier="${mongo.threadsAllowedToBlockForConnectionMultiplier}"
                connect-timeout="${mongo.connectTimeout}"
                max-wait-time="${mongo.maxWaitTime}"
                auto-connect-retry="${mongo.autoConnectRetry}"
                socket-keep-alive="${mongo.socketKeepAlive}"
                socket-timeout="${mongo.socketTimeout}"
                slave-ok="${mongo.slaveOk}"
                write-number="1"
                write-timeout="0"
                write-fsync="true"/>
    </mongo:mongo>

    <mongo:db-factory dbname="store_location" mongo-ref="mongo"/>

    <!-- OSSClien end -->

    <!-- httpClient -->
    <!-- 定义连接管理器 -->
    <bean id="httpClientConnectionManager"
          class="org.apache.http.impl.conn.PoolingHttpClientConnectionManager"
          destroy-method="close">
        <!-- 最大连接数 -->
        <property name="maxTotal" value="${httpClient.maxTotal}"/>
        <!-- 设置每个主机地址的并发数 -->
        <property name="defaultMaxPerRoute" value="${httpClient.defaultMaxPerRoute}"/>
    </bean>

    <!-- httpclient对象构建器 -->
    <bean id="httpClientBuilder" class="org.apache.http.impl.client.HttpClientBuilder">
        <!-- 设置连接管理器 -->
        <property name="connectionManager" ref="httpClientConnectionManager"/>
    </bean>

    <!-- 定义Httpclient对象 -->
    <bean id="httpClient" class="org.apache.http.impl.client.CloseableHttpClient"
          factory-bean="httpClientBuilder" factory-method="build" scope="prototype">
    </bean>

    <!-- 定义清理无效连接
    <bean class="com.taotao.common.httpclient.IdleConnectionEvictor"
        destroy-method="shutdown">
        <constructor-arg index="0" ref="httpClientConnectionManager" />
    </bean>
    -->
    <bean id="requestConfigBuilder" class="org.apache.http.client.config.RequestConfig.Builder">
        <!-- 创建连接的最长时间 -->
        <property name="connectTimeout" value="${httpClient.connectTimeout}"/>
        <!-- 从连接池中获取到连接的最长时间 -->
        <property name="connectionRequestTimeout" value="${httpClient.connectionRequestTimeout}"/>
        <!-- 数据传输的最长时间 -->
        <property name="socketTimeout" value="${httpClient.socketTimeout}"/>
        <!-- 提交请求前测试连接是否可用 -->
        <property name="staleConnectionCheckEnabled" value="${httpClient.staleConnectionCheckEnabled}"/>
    </bean>

    <!-- 定义请求参数 -->
    <bean id="requestConfig" class="org.apache.http.client.config.RequestConfig" factory-bean="requestConfigBuilder" factory-method="build">
    </bean>

</beans>